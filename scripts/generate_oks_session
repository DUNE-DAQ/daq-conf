#!/bin/env python3

import oksdbinterfaces
import os
import json
import sys
import click
from pathlib import Path

def process_environment(boot_dict, env_formatter, dal, db):
  exclude = ["CET_PLUGIN_PATH",
             "DUNEDAQ_SHARE_PATH",
             "LD_LIBRARY_PATH",
             "PYTHONPATH",
             "PATH"]
  env = []
  for name, value in boot_dict.items():
    if name not in exclude:
      value = value.format(**env_formatter)
      if value.startswith('getenv'):
        if name in os.environ:
          value = os.environ[name]
        else:
          if value == 'getenv_ifset':
            continue
          else:
            value = value.removeprefix('getenv')
            value = value.removeprefix(':')
      var = dal.Variable(name, name=name, value=value)
      env.append(var)
      db.update_dal(var)

      if name=="INFO_SVC":
        global info_svc
        info_svc = value
      if name == "CMD_FAC":
        global cmd_fac
        cmd_fac = value
  return env


@click.command()
@click.option('--session_name', '-s', default='generated-session',
              help='Name of generated session', show_default=True)
@click.option('-d', '--datafile',
              help='Name of generated OKS data file default: <session_name>Session.data.xml')
@click.option('--oks_controller', is_flag=True)
@click.argument('bootfile', type=click.Path(exists=True))
def generate(bootfile, datafile, session_name, oks_controller):
  """Simple script to generate a single Segment OKS Session down to
  the application level from a daqconf generated boot.json file."""
  with open(bootfile) as f:
    boot = json.loads(f.read())
    f.close()
  controllerfile = bootfile.replace('boot','controller')
  with open(controllerfile) as f:
    controller = json.loads(f.read())
    f.close()

  if datafile == None:
    datafile = f"{session_name.removesuffix('-session')}Session.data.xml"

  print(f"  Generating session {session_name} in {datafile}")

  schemafile = "schema/coredal/dunedaq.schema.xml"
  dal = oksdbinterfaces.dal.module('generated', schemafile)
  db = oksdbinterfaces.Configuration("oksconfig")
  db.create_db(datafile, [schemafile])

  # ###########################################################################
  # First deal with all the hosts physical and virtual. For now let them
  # all use the same definition of processing resources
  # ###########################################################################
  cpus = dal.ProcessingResource("cpus",cpu_cores=[0,1,2,3])
  db.update_dal(cpus)

  vhosts={}
  phostnames=set()
  for h, cfg in boot['hosts-ctrl'].items():
    phostnames.add(cfg)
    vhosts[h]=cfg

  phostdals = {}
  for h in phostnames:
    phdal = dal.PhysicalHost(h,contains=[cpus])
    db.update_dal(phdal)
    phostdals[h] = phdal
  vhostdals = {}
  for h, ph in vhosts.items():
    vhdal = dal.VirtualHost(h,runs_on=phostdals[ph],uses=[cpus])
    db.update_dal(vhdal)
    vhostdals[h] = vhdal

  # ###########################################################################
  # Create a run controller for the segment. 
  # ###########################################################################
  fsm = controller['statefulnode']['fsm']
  for iface in fsm['interfaces']:
    iface_dal = dal.FSMinterface('dummy-if', name=iface, commands=[])
    db.update_dal(iface_dal)
  pre_trans = []
  for pt in fsm['pre_transitions']:
    xtrans = fsm['pre_transitions'][pt]
    ptdal = dal.FSMxTransition(pt,
                               order=xtrans['order'],
                               mandatory=xtrans['mandatory'])
    db.update_dal(ptdal)
    pre_trans.append(ptdal)
  post_trans = []
  for pt in fsm['post_transitions']:
    xtrans = fsm['post_transitions'][pt]
    ptdal = dal.FSMxTransition(pt,
                               order=xtrans['order'],
                               mandatory=xtrans['mandatory'])
    db.update_dal(ptdal)
    post_trans.append(ptdal)
  transitions = []
  for trans in fsm['transitions']:
    trans = dal.FSMtransition(trans['trigger'],
                              source=trans['source'],
                              dest=trans['dest'])
    db.update_dal(trans)
    transitions.append(trans)
  cmd_sequences = []
  for seq in fsm['command_sequences']:
    sequence = []
    for cmd in fsm['command_sequences'][seq]:
      cmd_dal = dal.FSMCommand(cmd['cmd'],
                               cmd=cmd['cmd'],
                               optional=cmd['optional'])
      db.update_dal(cmd_dal)
      sequence.append(cmd_dal)
    seqdal = dal.FSMsequence(seq, sequence=sequence)
    db.update_dal(seqdal)
    cmd_sequences.append(seqdal)
  fsm = dal.FSMconfiguration('fsmConf-1',
                             states = fsm['states'],
                             initial_state = fsm['initial_state'],
                             transitions = transitions,
                             pre_transitions = pre_trans,
                             post_transitions = post_trans,
                             command_sequences=cmd_sequences)
  db.update_dal(fsm)
  bcaster = dal.RCBroadcatser('bcaster',
                              type=controller['broadcaster']['type'],
                              address=controller['broadcaster']['kafka_address'],
                              publish_timeout=controller['broadcaster']['publish_timeout'])
  db.update_dal(bcaster)
  name = "my-controller"

  if oks_controller:
    cfg_path = Path(datafile).absolute()
    args = f"oksconfig:{cfg_path} ${{PORT}} {name} {session_name}"
  else:
    ctlr_path = Path(controllerfile).absolute()
    args = f"file://{ctlr_path} ${{PORT}} {name} {session_name}"

  host = boot['apps']['controller']['host']
  runcontrol_app = dal.RCApplication(name,
                                     application_name="drunc-controller",
                                     commandline_parameters=args,
                                     runs_on=vhostdals[host],
                                     broadcaster = bcaster,
                                     fsm=fsm)
  db.update_dal(runcontrol_app)

  # ###########################################################################
  # Now sort out the environment variables
  # ###########################################################################
  env_formatter = {
    "APP_PORT": "{port}",
    "APP_NAME": "{name}",
    "APP_HOST": "{host}",
    "DUNEDAQ_PARTITION": session_name
  }
  env = process_environment(boot['env'], env_formatter, dal, db)
  common_env = dal.VariableSet("common-env", contains=env)
  db.update_dal(common_env)

  exec_envs = {}
  exec_cmd = {}
  exec_args = {}
  for ex, cfg in boot['exec'].items():
    env = process_environment(cfg['env'], env_formatter, dal, db)
    ex_env = dal.VariableSet(ex, contains=env)
    db.update_dal(ex_env)
    exec_envs[ex] = ex_env
    exec_cmd[ex] = cfg['cmd']
    exec_args[ex] = " ".join(cfg['args'])

  # ###########################################################################
  # Now create any services
  # ###########################################################################
  services = []
  srvdals = []
  if 'services' in boot:
    for srv, cfg in boot['services'].items():
      if srv == "connectionservice":
        env_formatter = {
          "APP_HOST": vhostdals[cfg['host']],
          "DUNEDAQ_PARTITION": session_name,
          "APP_NAME": srv,
          "APP_PORT": cfg["port"],
          "APP_WD": os.getcwd(),
        }
        args = exec_args[cfg['exec']].format(**env_formatter)
        srvdal = dal.ConnectionService(srv,
                                       port=cfg['port'],
                                       application_name=exec_cmd[cfg['exec']],
                                       commandline_parameters=args,
                                       runs_on=vhostdals[cfg['host']],
                                       applicationEnvironment=[exec_envs[cfg['exec']]])
        db.update_dal(srvdal)
        srvdals.append(srvdal)

  # ###########################################################################
  # Now create all the DAQ Applications
  # ###########################################################################
  applicationdals = []
  confdir = os.path.abspath(os.path.dirname(bootfile))
  for app, cfg in boot['apps'].items():
    if app == 'controller':
      # Skip controller, we've already dealt with it
      continue
    env_formatter = {
      "APP_HOST": vhostdals[cfg['host']],
      "DUNEDAQ_PARTITION": session_name,
      "APP_NAME": app,
      "name": app,
      "APP_PORT": "${PORT}",
      "port": "${PORT}",
      "APP_WD": os.getcwd(),
      "CONF_LOC": f"file://{confdir}/data" #/{app}-conf.json"
    }
    env_formatter["CMD_FAC"] = cmd_fac.format(**env_formatter)
    env_formatter["INFO_SVC"] = info_svc.format(**env_formatter)
    args = exec_args[cfg['exec']].format(**env_formatter)

    appdal = dal.DaqApplication(app,
                                application_name=exec_cmd[cfg['exec']],
                                commandline_parameters=args,
                                runs_on=vhostdals[cfg['host']],
                                applicationEnvironment=[exec_envs[cfg['exec']]],
                                modules=[])
    db.update_dal(appdal)
    applicationdals.append(appdal)

  # ###########################################################################
  # Create a dummy ReadoutMap for now since the real one will be read from JSON
  # by the applications themselves
  # ###########################################################################
  ro_group = dal.ReadoutGroup('dummyRog')
  db.update_dal(ro_group)
  ro_map = dal.ReadoutMap('dummyRoMap', groups=[ro_group])
  db.update_dal(ro_map)

  # ###########################################################################
  # Finally create the Segment and Session
  # ###########################################################################
  segdal = dal.Segment("generated-segment",
                       applications=applicationdals,
                       controller=runcontrol_app)
  db.update_dal(segdal)

  # Sort out detector config
  detconf = dal.DetectorConfig("dummy-detector")
  db.update_dal(detconf)

  # Find the rte script
  for name in ['DBT_INSTALL_DIR','DBT_AREA_ROOT']:
    if name in  os.environ:
      rte_path = os.environ[name] + "/daq_app_rte.sh"
      break

  sessiondal = dal.Session(session_name,
                           environment=[common_env],
                           segment=segdal,
                           detector_configuration=detconf,
                           services=srvdals,
                           readout_map=ro_map,
                           rte_script=rte_path)
  db.update_dal(sessiondal)
  db.commit()


if __name__ == '__main__':
  generate()
